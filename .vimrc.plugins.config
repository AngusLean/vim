"exvim/ex-config {{{
nnoremap <unique> <leader>ve :call exconfig#edit_cur_vimentry ()<CR>

"}}}

"exvim/ex-utility {{{
nnoremap <unique> <silent> <Leader>bd :EXbd<CR>
nnoremap <unique> <silent> <C-l> :EXbn<CR>
nnoremap <unique> <silent> <C-h> :EXbp<CR>
nnoremap <unique> <silent> <C-Tab> :EXbalt<CR>
nnoremap <unique> <silent> <Leader><Tab> :EXsw<CR>
nmap <unique> <silent> <Leader><Esc> :EXgp<CR><ESC>

"}}}


"exvim/ex-project {{{
let g:ex_project_winsize=30
"}}}

"exvim/ex-gsearch {{{
call exgsearch#register_hotkey( 100, 0, '<leader>gs', ":EXGSearchToggle<CR>", 'Toggle global search window.' )
call exgsearch#register_hotkey( 101, 0, '<leader>gg', ":EXGSearchCWord<CR>", 'Search current word.' )
call exgsearch#register_hotkey( 102, 0, '<leader><S-f>', ":GS ", 'Shortcut for :GS' )

"}}}

"exvim/ex-tags {{{
call extags#register_hotkey( 100, 0, '<leader>ts', ":EXTagsToggle<CR>", 'Toggle tag select window.' )
call extags#register_hotkey( 101, 0, '<leader>]', ":EXTagsCWord<CR>", 'Tag select current word.' )
" DISABLE: nnoremap <unique> <leader>] :exec 'ts ' . expand('<cword>')<CR>

"}}}


"exvim/ex-symbol {{{
call exsymbol#register_hotkey( 100, 0, '<leader>ss', ":EXSymbolList<CR>", 'List all symbols.' )
call exsymbol#register_hotkey( 101, 0, '<leader>sq', ":EXSymbolOpen<CR>", 'Open symbols window.' )
call exsymbol#register_hotkey( 102, 0, '<leader>sg', ":EXSymbolCWord<CR>", 'List symbols contains current word.' )

if has('gui_running')
    if has ('mac')
        call exsymbol#register_hotkey( 102, 0, 'Ò', ":EXSymbolList<CR>:redraw<CR>/", 'List all symbols and stay in search mode.' )
    else
        call exsymbol#register_hotkey( 102, 0, '<M-L>', ":EXSymbolList<CR>:redraw<CR>/", 'List all symbols and stay in search mode.' )
    endif
endif
let g:ex_symbol_select_cmd = 'TS'
"}}}

"exvim/ex-cscope {{{
call excscope#register_hotkey( 100, 0, '<leader>cd', ":EXCSToggle<CR>", 'Toggle cscope window.' )

"}}}


"exvim/ex-qfix {{{
call exqfix#register_hotkey( 100, 0, '<leader>qf', ":EXQFixToggle<CR>", 'Toggle quickfix window.' )
call exqfix#register_hotkey( 101, 0, '<leader>qq', ":EXQFixPaste<CR>", 'Open quickfix window and paste error list from register *.' )

"}}}


"exvim/ex-hierarchy {{{
" nnoremap <unique> <leader>hv :EXHierarchyCWord<CR>

"}}}

"exvim/ex-taglist {{{
" ex-taglist: invoke by <F4>

" F4:  Switch on/off TagList
"nnoremap <unique> <silent> <F4> :TlistToggle<CR>

"let Tlist_Ctags_Cmd = $VIM.'/vimfiles/ctags.exe' " location of ctags tool
"let Tlist_Show_One_File = 1 " Displaying tags for only one file~
""let Tlist_Exist_OnlyWindow = 1 " if you are the last, kill yourself
"let Tlist_Use_Right_Window = 1 " split to the right side of the screen
""let Tlist_Sort_Type = "order" " sort by order or name
"let Tlist_Display_Prototype = 0 " do not show prototypes and not tags in the taglist window.
"let Tlist_Compart_Format = 1 " Remove extra information and blank lines from the taglist window.
"let Tlist_GainFocus_On_ToggleOpen = 1 " Jump to taglist window on open.
"let Tlist_Display_Tag_Scope = 1 " Show tag scope next to the tag name.
"let Tlist_Close_On_Select = 0 " Close the taglist window when a file or tag is selected.
"let Tlist_BackToEditBuffer = 0 " If no close on select, let the user choose back to edit buffer or not
"let Tlist_Enable_Fold_Column = 0 " Don't Show the fold indicator column in the taglist window.
"let Tlist_WinWidth = 40
"let Tlist_Compact_Format = 1 " do not show help
" let Tlist_Ctags_Cmd = 'ctags --c++-kinds=+p --fields=+iaS --extra=+q --languages=c++'
" very slow, so I disable this
" let Tlist_Process_File_Always = 1 " To use the :TlistShowTag and the :TlistShowPrototype commands without the taglist window and the taglist menu, you should set this variable to 1.
":TlistShowPrototype [filename] [linenumber]

" add javascript language
"let tlist_javascript_settings = 'javascript;v:global variable:0:0;c:class;p:property;m:method;f:function;r:object'
" add hlsl shader language
"let tlist_hlsl_settings = 'c;d:macro;g:enum;s:struct;u:union;t:typedef;v:variable;f:function'
" add actionscript language
"let tlist_actionscript_settings = 'actionscript;c:class;f:method;p:property;v:variable'

"}}}

"exvim/ex-showmarks {{{

" TODO: bootleq/ShowMarks on github is well organized in code, but have lots
" bugs, consider merge his code and fixes the bugs
let g:showmarks_enable = 1
let g:showmarks_include = 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ'
let g:showmarks_ignore_type = 'hqm' " Ignore help, quickfix, non-modifiable buffers
" Hilight lower & upper marks
let g:showmarks_hlline_lower = 1
let g:showmarks_hlline_upper = 0
"}}}



"ctrlpvim/ctrlp.vim {{{
 let g:ctrlp_working_path_mode = ''
 let g:ctrlp_match_window = 'bottom,order:ttb,min:1,max:10,results:10'
 let g:ctrlp_follow_symlinks = 2
 let g:ctrlp_max_files = 0 " Unset cap of 10,000 files so we find everything

 set wildignore+=*/tmp/*,*.so,*.swp,*.zip     " MacOSX/Linux
 set wildignore+=*\\tmp\\*,*.swp,*.zip,*.exe  " Windows

 "let g:ctrlp_custom_ignore = '\v[\/]\.(git|hg|svn)$'
 let g:ctrlp_custom_ignore = {
   \ 'dir':  '\v[\/]\.(git|hg|svn)$',
   \ 'file': '\v\.(exe|o|so|dll)$',
   \ 'link': 'some_bad_symbolic_links'
   \ }
" nnoremap <unique> <leader>bs :CtrlPBuffer<CR>
" nnoremap <unique> <c-s-p> :CtrlPBuffer<CR>

"}}}



"tpope/vim-surround {{{
xmap s <Plug>VSurround
"}}}


"scrooloose/nerdtree {{{

let g:NERDTreeWinSize = 30
let g:NERDTreeMouseMode = 1
let g:NERDTreeMapToggleZoom = '<Space>'
nnoremap <F3> :NERDTreeToggle<CR>
"}}}

" nerdcommenter: invoke by <leader>c<space>, <leader>cl, <leader>cu, <F11> or <C-F11>
"{{{
let g:NERDSpaceDelims = 1
let g:NERDRemoveExtraSpaces = 1
let g:NERDCustomDelimiters = {
            \ 'vimentry': { 'left': '--' },
            \ }
" map <unique> <C-/> <Plug>NERDCommenterAlignBoth
" map <unique> <C-F11> <Plug>NERDCommenterUncomment

"}}}


"scrooloose/syntastic {{{
let g:syntastic_javascript_checkers = ['eslint']
set statusline+=%#warningmsg#
set statusline+=%{SyntasticStatuslineFlag()}
set statusline+=%*

let g:syntastic_always_populate_loc_list = 1
let g:syntastic_auto_loc_list = 1
let g:syntastic_check_on_open = 0
let g:syntastic_check_on_wq = 0
"this will make html file by Angular.js ignore errors
"let g:syntastic_html_tidy_ignore_errors=[" proprietary attribute \"ng-"]

"}}}


"vim-scripts/LargeFile {{{
let g:LargeFile= 5 " files >= 5MB will use LargeFile rules

"}}}


"emmet-vim {{{
let g:user_emmet_install_global = 0
autocmd FileType html,css,jsp EmmetInstall

"}}}


"godlygeek/tabular {{{
nnoremap <silent> <leader>= :call g:Tabular(1)<CR>
xnoremap <silent> <leader>= :call g:Tabular(0)<CR>
function! g:Tabular(ignore_range) range
   let c = getchar()
   let c = nr2char(c)
    if a:ignore_range == 0
        exec printf('%d,%dTabularize /%s', a:firstline, a:lastline, c)
    else
        exec printf('Tabularize /%s', c)
    endif
endfunction
"}}}


"plasticboy/vim-markdown {{{
let g:vim_markdown_initial_foldlevel=9999

"}}}


"ntpeters/vim-better-whitespace {{{
autocmd BufWritePre * StripWhitespace
"}}}


"othree/yajs.vim {{{
let g:smc = 100
"}}}


"Shougo/vimproc.vim {{{
set rtp += "~/software/exvim1/vimfiles/plugged/vimproc.vim"

"}}}


"Shougo/unite.vim neomru.vim {{{

function! DoUniteFuzzyLine()
    call unite#custom#source('line', 'sorters', 'sorter_rank')
    call unite#custom#source('line', 'matchers', 'matcher_fuzzy')
    exec "Unite -buffer-name=line line"
endfunction

if executable('ag')
  let g:unite_source_rec_async_command =
            \ ['ag', '--follow', '--nocolor', '--nogroup',
    \  '--hidden', '-g','-l',  '']

  let g:unite_source_grep_command = 'ag'
  let g:unite_source_grep_default_opts = '--nocolor --nogroup --hidden --ignore-case --ignore tags'
    \. ' --ignore node_modules  --ignore .git --ignore doc'
  let g:unite_source_grep_recursive_opt = ''
elseif executable('ack-grep')
  let g:unite_source_grep_command = 'ack-grep'
  let g:unite_source_grep_default_opts =
              \ '--no-heading --no-color -a -H'
  let g:unite_source_grep_recursive_opt = ''
elseif executable('pt')
  let g:unite_source_grep_command = 'pt'
  let g:unite_source_grep_default_opts = '--nogroup --nocolor'
  let g:unite_source_grep_recursive_opt = ''
  let g:unite_source_grep_encoding = 'utf-8'
endif

" call unite#filters#matcher_default#use(['matcher_fuzzy'])
call unite#custom#source('file,file_rec/async,file_rec,file_mru',
        \ 'ignore_pattern', join([
        \ '\.swp', '\.swo', '\~$',
        \ '\.git/', '\.svn/', '\.hg/',
        \ '^tags$', '\.taghl$','test/','doc/','build/','\.exvim.*/',
        \ '\.ropeproject/', '\.pbxproj$', '\.xcodeproj', '\.vcproj',
        \ 'node_modules/', 'bower_components/', 'typings/', 'libs/', 'log/', 'tmp/', 'obj/',
        \ '/vendor/gems/', '/vendor/cache/', '\.bundle/', '\.sass-cache/',
        \ '/tmp/cache/assets/.*/sprockets/', '/tmp/cache/assets/.*/sass/',
        \ 'thirdparty/', 'Debug/', 'Release/', 'build/', 'dist/',
        \ 'web/static/components/', 'web/static/external/', 'web/static/images/',
        \ '\.pyc$', 'pb2\.py$', '\.class$', '\.jar$', '\.min\.js$',
        \ '\.jpg$', '\.jpeg$', '\.bmp$', '\.png$', '\.gif$',
        \ '\.o$', '\.out$', '\.obj$', '\.rbc$', '\.rbo$', '\.gem$',
        \ '\.zip$', '\.tar\.gz$', '\.tar\.bz2$', '\.rar$', '\.tar\.xz$'
        \ ], '\|'))
call unite#custom#profile('default', 'context', {
    \   'start_insert': 1,
    \   'winheight': 10,
    \   'direction': 'botright',
    \ })

nnoremap <silent><leader>l :call g:DoUniteFuzzyLine()<CR>
" nnoremap <c-p> :Unite -start-insert -buffer -auto-resize file_mru file_rec/async  file <CR>
" nnoremap <c-s-p> :Unite -start-insert -auto-resize file file_rec/async file_mru <CR>
"nnoremap <c-f> :Unite grep:.:-iR<CR>
nnoremap <c-f> :Unite grep:.<CR>
"}}}


"neocomplete {{{
if count(g:exvim_plug_groups , 'neocomplete')
 " Note: This option must set it in .vimrc(_vimrc).  NOT IN .gvimrc(_gvimrc)!
    " Disable AutoComplPop.
    let g:acp_enableAtStartup = 0
    " Use neocomplete.
    let g:neocomplete#enable_at_startup = 1
    " Use smartcase.
    let g:neocomplete#enable_smart_case = 1
    " Set minimum syntax keyword length.
    let g:neocomplete#sources#syntax#min_keyword_length = 2
    let g:neocomplete#lock_buffer_name_pattern = '\*ku\*'

    " Define dictionary.
    let g:neocomplete#sources#dictionary#dictionaries = {
        \ 'default' : '',
        \ 'arduino' : $VIM.'/vimfiles/requirefile/dict/arduino.dict',
        \ 'c' : $VIM.'/vimfiles/requirefile/dict/c.dict',
        \ 'cpp' : $VIM.'/vimfiles/requirefile/dict/cpp.dict',
        \ 'css' : $VIM.'/vimfiles/requirefile/dict/css.dict',
        \ 'java' : $VIM.'/vimfiles/requirefile/dict/java.dict',
        \ 'javascript' : $VIM.'/vimfiles/requirefile/dict/javascript.dict',
        \ 'php' : $VIM.'/vimfiles/requirefile/dict/php.dict',
        \ 'vim' : $VIM.'/vimfiles/requirefile/dict/vim.dict',
        \ 'matlab' : $VIM.'/vimfiles/requirefile/dict/matlab.dict',
    \ }

    " Define keyword.
    if !exists('g:neocomplete#keyword_patterns')
        let g:neocomplete#keyword_patterns = {}
    endif
    let g:neocomplete#keyword_patterns['default'] = '\h\w*'

    " Plugin key-mappings.
    inoremap <expr><C-g>     neocomplete#undo_completion()
    inoremap <expr><C-l>     neocomplete#complete_common_string()

    " Recommended key-mappings.
    " <CR>: close popup and save indent.
    inoremap <silent> <CR> <C-r>=<SID>my_cr_function()<CR>
    function! s:my_cr_function()
    return neocomplete#close_popup() . "\<CR>"
    " For no inserting <CR> key.
    return pumvisible() ? neocomplete#close_popup() : "\<CR>"
    endfunction
    " <TAB>: completion.
    inoremap <expr><TAB>  pumvisible() ? "\<C-n>" : "\<TAB>"
    " <C-h>, <BS>: close popup and delete backword char.
    inoremap <expr><C-h> neocomplete#smart_close_popup()."\<C-h>"
    inoremap <expr><BS> neocomplete#smart_close_popup()."\<C-h>"
    inoremap <expr><C-y>  neocomplete#close_popup()
    inoremap <expr><C-e>  neocomplete#cancel_popup()
    " Close popup by <Space>.
    inoremap <expr><Space> pumvisible() ? neocomplete#close_popup() : "\<Space>"

    " For cursor moving in insert mode(Not recommended)
    inoremap <expr><Left>  neocomplete#close_popup() . "\<Left>"
    inoremap <expr><Right> neocomplete#close_popup() . "\<Right>"
    inoremap <expr><Up>    neocomplete#close_popup() . "\<Up>"
    inoremap <expr><Down>  neocomplete#close_popup() . "\<Down>"
    " Or set this.
    let g:neocomplete#enable_cursor_hold_i = 1
    " Or set this.
    let g:neocomplete#enable_insert_char_pre = 1

    " AutoComplPop like behavior.
    " let g:neocomplete#enable_auto_select = 1

    " Shell like behavior(not recommended).
    "set completeopt+=longest
    "let g:neocomplete#enable_auto_select = 1
    "let g:neocomplete#disable_auto_complete = 1
    "inoremap <expr><TAB>  pumvisible() ? "\<Down>" : "\<C-x>\<C-u>"

    " Enable omni completion.
    autocmd FileType css setlocal omnifunc=csscomplete#CompleteCSS
    autocmd FileType html,markdown setlocal omnifunc=htmlcomplete#CompleteTags
    autocmd FileType javascript setlocal omnifunc=javascriptcomplete#CompleteJS
    autocmd FileType python setlocal omnifunc=pythoncomplete#Complete
    autocmd FileType xml setlocal omnifunc=xmlcomplete#CompleteTags

    " Enable heavy omni completion.
    " if !exists('g:neocomplete#sources#omni#input_patterns')
    " let g:neocomplete#sources#omni#input_patterns = {}
    " endif
    "let g:neocomplete#sources#omni#input_patterns.php = '[^. \t]->\h\w*\|\h\w*::'
    "let g:neocomplete#sources#omni#input_patterns.c = '[^.[:digit:] *\t]\%(\.\|->\)'
    "let g:neocomplete#sources#omni#input_patterns.cpp = '[^.[:digit:] *\t]\%(\.\|->\)\|\h\w*::'

"}}}
"Valloric/YouCompleteMe {{{
elseif count(g:exvim_plug_groups , 'YouCompleteMe')
    let g:ycm_global_ycm_extra_conf = '~/software/exvim1/vimfiles/requirefile/.ycm_extra_conf.py'
    let g:ycm_confirm_extra_conf=0   "设置加载py文件不提示
    "设置离开插入模式自动关闭预览窗口
    let g:ycm_autoclose_preview_window_after_insertion=1
    "设置选择预览数据过后自动关闭
    let g:ycm_autoclose_preview_window_after_completion =1

    " YCM 集成 OmniCppComplete 补全引擎，设置其快捷键
    inoremap <leader>; <C-x><C-o>
    " 设置转到定义处的快捷键为ALT + G，这个功能非常赞
    "nmap <M-g> :YcmCompleter GoToDefinitionElseDeclaration <C-R>=expand("<cword>")<CR><CR>
    nnoremap <M-g> :YcmCompleter GoTo <CR>
    "命名模式下ycm映射到YcmCompleter
    cmap ycm YcmCompleter
    autocmd FileType javascript nnoremap <M-F7> :YcmCompleter GoToReferences<cr>
    autocmd FileType javascript nnoremap <S-F6> :YcmCompleter RefactorRename<space>
    " 补全功能在注释中同样有效
    let g:ycm_complete_in_comments=1
    " 开启标签补全
    " let g:ycm_collect_identifiers_from_tags_files = 1
    " set tags+='e:\.symbs\cpp_src\tags' "C++标准库的tags
    " 从第一个键入字符就开始罗列匹配项
    let g:ycm_min_num_of_chars_for_completion=2
    " 离开插入模式后自动关闭预览窗口
    autocmd InsertLeave * if pumvisible() == 0|pclose|endif
    " 禁止缓存匹配项，每次都重新生成匹配项
    let g:ycm_cache_omnifunc = 1
    " 语法关键字补全
    let g:ycm_seed_identifiers_with_syntax=1
    " 修改对C函数的补全快捷键，默认是CTRL + space，修改为ALT + ;
    let g:ycm_key_invoke_completion = '<M-;>'
    " 回车即选中当前项
    inoremap <expr> <CR>       pumvisible() ? "\<C-y>" : "\<CR>"
endif
"}}}


"maksimr/vim-jsbeautify {{{

" or
autocmd FileType javascript noremap <buffer>  <leader>f :call JsBeautify()<cr>
" for json
autocmd FileType json noremap <buffer> <leader>f :call JsonBeautify()<cr>
" for html
autocmd FileType html noremap <buffer> <leader>f :call HtmlBeautify()<cr>
" for css or scss
autocmd FileType css noremap <buffer> <leader>f :call CSSBeautify()<cr>
autocmd FileType javascript vnoremap <buffer>  <leader>f :call RangeJsBeautify()<cr>
autocmd FileType json vnoremap <buffer> <leader>f :call RangeJsonBeautify()<cr>
autocmd FileType html vnoremap <buffer> <leader>f :call RangeHtmlBeautify()<cr>
autocmd FileType css vnoremap <buffer> <leader>f :call RangeCSSBeautify()<cr>

"}}}


"thinca/vim-quickrun {{{
    let g:quickrun_config = {
    \   "html":{
    \       "command": "D:\DevelopTool\ffdevelop\firefox.exe"
    \   },
    \   "_" : {
    \       "outputter" : "message",
    \   }
    \}

    let g:quickrun_no_default_key_mappings = 1
    nmap <Leader>r <Plug>(quickrun)
    map <F10> :QuickRun<CR>
"}}}


"SirVer/ultisnips {{{
" UltiSnips 的 tab 键与 YCM 冲突，重新设定
let g:UltiSnipsExpandTrigger="<leader><tab>"

let g:UltiSnipsExpandTrigger="<c-j>"
" let g:UltiSnipsExpandTrigger="<c-y>"
let g:UltiSnipsJumpForwardTrigger="<leader><tab>"
let g:UltiSnipsJumpBackwardTrigger="<leader><s-tab>"

"}}}




"config {{{

"}}}


if g:islinux
    set guifont=Source\ Code\ Pro\ Bold\ 11
endif
