
"Yggdroot/LeaderF  ctrlp replacement {{{
let g:Lf_ShortcutF = '<C-P>'
let g:Lf_WildIgnore = {
        \ 'dir': ['.svn','.git','node_modules','.exvim*'],
        \ 'file': ['*.sw?','~$*','*.bak','*.exe','*.dll','*.o','*.so','*.py[co]']
        \}

"}}}

"tpope/vim-surround {{{
xmap s <Plug>VSurround
"}}}

"itchyny/lightline.vim {{{
  let g:lightline = {
      \ 'colorscheme': 'wombat',
      \ 'active': {
      \   'left': [ [ 'mode'],['filename'],
      \             [ 'syntastic','readonly', 'asyncrun' ] ]
      \ },
      \ 'component': {
      \   'readonly': '%{&filetype=="help"?"":&readonly?"⭤":""}'
      \ },
      \ 'component_function': {
      \   'asyncrun': 'LightLineAsync',
      \   'syntastic': 'ALEGetStatusLine'
      \ },
      \ 'component_visible_condition': {
      \   'readonly': '(&filetype!="help"&& &readonly)'
      \ },
      \ 'separator': { 'left': "\ue0b0", 'right': "\u2b82" },
      \ 'subseparator': { 'left': " >", 'right': "|" }
      \ }

 "    \ 'component_expand': {
 "    \   'syntastic': 'SyntasticStatuslineFlag',
 "    \ },
function! LightLineAsync()
  if g:asyncrun_status == "running"
    return "asyn-running"
  elseif g:asyncrun_status == "success"
    return "asyn-exit"
  elseif g:asyncrun_status == "failure"
    return "asyn-fail"
  else
    return ""
endfunction
"}}}

"scrooloose/nerdtree {{{
map <F3> :NERDTreeToggle<CR>
"}}}


"Chiel92/vim-autoformat {{{
let g:formatdef_autopep8 = "'autopep8 - --range '.a:firstline.' '.a:lastline"
let g:formatters_python = ['autopep8']
"}}}


" nerdcommenter: invoke by <leader>c<space>, <leader>cl, <leader>cu, <F11> or <C-F11>
"{{{
"let g:NERDCreateDefaultMappings = 0
let g:NERDSpaceDelims = 1
let g:NERDRemoveExtraSpaces = 1
let g:NERDCustomDelimiters = {
            \ 'vimentry': { 'left': '--' },
            \ }

nnoremap <leader>cc :NERDComToggleComment<CR>

"}}}


"scrooloose/syntastic {{{
let g:syntastic_javascript_checkers = ['eslint']
set statusline+=%#warningmsg#
set statusline+=%{SyntasticStatuslineFlag()}
set statusline+=%*
"let g:syntastic_always_populate_loc_list = 1
"let g:syntastic_auto_loc_list = 1
"let g:syntastic_check_on_open = 0
"let g:syntastic_check_on_wq = 0
"this will make html file by Angular.js ignore errors
"let g:syntastic_html_tidy_ignore_errors=[" proprietary attribute \"ng-"]

"}}}


"w0rp/ale {{{
let g:ale_linters = {
\   'javascript': ['eslint'],
\   'c':['gcc'],
\   'python':['pylint'],
\}
let g:ale_statusline_format = ['%d error(s)', '%d warning(s)', 'OK']
"let g:ale_lint_on_text_changed = 0
"let g:ale_lint_on_enter = 0
"let g_ale_lint_on_save=1
nmap <silent> <C-up> <Plug>(ale_previous_wrap)
nmap <silent> <C-down> <Plug>(ale_next_wrap)
"}}}


"dyng/ctrlsf.vim {{{
let g:ctrlsf_case_sensitive = 'no'
let g:ctrlsf_auto_close = 1
" 高亮匹配行: o->打开的目标文件;p->预览文件
let g:ctrlsf_selected_line_hl = 'op'
" 默认搜索路径, 设置为project则从本文件的工程目录搜索
" let g:ctrlsf_default_root = 'project+wf'
" 工程目录的顶级文件夹
" let g:ctrlsf_vcs_folder = ['.exvim', '.git', '.hg', '.svn', '.bzr', '_darcs']
" make result windows compact
let g:ctrlsf_indent = 2
let g:ctrlsf_regex_pattern = 1
vmap     <C-F> <Plug>CtrlSFVwordPath
nmap     <C-F> <Plug>CtrlSFCwordPath
nmap     <C-S-F> <Plug>CtrlSFPwordPath
" nmap     <C-F>f <Plug>CtrlSFPrompt
" vmap     <C-F>F <Plug>CtrlSFVwordExec
" nnoremap <C-F>o :CtrlSFOpen<CR>
" nnoremap <C-F>t :CtrlSFToggle<CR>
" inoremap <C-F>t <Esc>:CtrlSFToggle<CR>
"}}}

"kristijanhusak/vim-multiple-cursors{{{
" let g:multi_cursor_use_default_mapping = 0
" let g:multi_cursor_start_word_key = '<C-j>'
" let g:multi_cursor_next_key = '<C-j>'
" let g:multi_cursor_prev_key = '<C-k>'
" let g:multi_cursor_skip_key = '<C-x>'
" let g:multi_cursor_quit_key = '<ESC>'
" Called once right before you start selecting multiple cursors
function! Multiple_cursors_before()
  if exists(':NeoCompleteLock')==2
    exe 'NeoCompleteLock'
  endif
endfunction

" Called once only when the multiple selection is canceled (default <Esc>)
function! Multiple_cursors_after()
  if exists(':NeoCompleteUnlock')==2
    exe 'NeoCompleteUnlock'
  endif
endfunction
"}}}


"vim-scripts/LargeFile {{{
let g:LargeFile= 5 " files >= 5MB will use LargeFile rules
"}}}

"emmet-vim {{{
let g:user_emmet_install_global = 0
autocmd FileType html,vue,css,jsp EmmetInstall
let g:user_emmet_settings={
\   'vue':{
\       'extends': 'html,javascript,css',
\   }
\}
"}}}

"godlygeek/tabular {{{
nnoremap <silent> <leader>= :call g:Tabular(1)<CR>
xnoremap <silent> <leader>= :call g:Tabular(0)<CR>
function! g:Tabular(ignore_range) range
   let c = getchar()
   let c = nr2char(c)
    if a:ignore_range == 0
        exec printf('%d,%dTabularize /%s', a:firstline, a:lastline, c)
    else
        exec printf('Tabularize /%s', c)
    endif
endfunction
"}}}


"plasticboy/vim-markdown {{{
let g:vim_markdown_initial_foldlevel=9999

"}}}

"ntpeters/vim-better-whitespace {{{
autocmd BufWritePre * StripWhitespace
"}}}

"othree/yajs.vim {{{
let g:smc = 100
"}}}


"maksimr/vim-jsbeautify {{{
" or
autocmd FileType javascript noremap <buffer>  <leader>f :call JsBeautify()<cr>
" for json
autocmd FileType json noremap <buffer> <leader>f :call JsonBeautify()<cr>
" for html
autocmd FileType html noremap <buffer> <leader>f :call HtmlBeautify()<cr>
" for css or scss
autocmd FileType css noremap <buffer> <leader>f :call CSSBeautify()<cr>
autocmd FileType javascript vnoremap <buffer>  <leader>f :call RangeJsBeautify()<cr>
autocmd FileType json vnoremap <buffer> <leader>f :call RangeJsonBeautify()<cr>
autocmd FileType html vnoremap <buffer> <leader>f :call RangeHtmlBeautify()<cr>
autocmd FileType css vnoremap <buffer> <leader>f :call RangeCSSBeautify()<cr>
autocmd FileType vue vnoremap <buffer> <leader>fh :call RangeHtmlBeautify()<cr>
autocmd FileType vue vnoremap <buffer> <leader>fc :call RangeCSSBeautify()<cr>
autocmd FileType vue vnoremap <buffer> <leader>fj :call RangeJsBeautify()<cr>
"}}}

"skywind3000/asyncrun.vim {{{

augroup vimrc
    autocmd QuickFixCmdPost * botright copen 8
augroup END

let g:asyncrun_encs = 'gbk'
autocmd FileType python nnoremap <F9> :AsyncRun python3 %:p<cr>
if g:islinux
  autocmd FileType html nnoremap <F9> :AsyncRun firefox %<cr>
else
  autocmd FileType html nnoremap <F9> :AsyncRun D:\DevelopTool\ffdevelop\firefox.exe %<cr>
endif
nnoremap <c-F9> :AsyncStop <cr>
noremap <F10> :call asyncrun#quickfix_toggle(8)<cr>
"}}}

"-----------is vim-quickrun tester
let g:quickrun_config = {}
let g:quickrun_config.html = {
      \ 'type': 'html',
      \ 'outputter': 'browser',
      \ 'exec': 'AsyncRun D:\DevelopTool\ffdevelop\firefox.exe',
      \ 'hook/output_encode/encoding': '&termencoding',
      \ 'command': '%<cr>'
      \ }


